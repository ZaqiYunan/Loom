// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  password    String
  email       String       @unique
  fullName    String       @map("full_name")
  role        String       @default("user") // 'user' atau 'seller'
  createdAt   DateTime     @default(now()) @map("created_at")
  
  seller        Seller?
  carts         Cart[]
  orders        Order[]
  userSkills    UserSkill[]
  messages      Message[]    // Pesan yang dikirim oleh user
  notifications Notification[] // Notifikasi untuk user
  customOrders  CustomOrder[] // Custom orders submitted by the user

  @@map("users")
}

model Seller {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  storeName   String   @map("store_name")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id])
  products    Product[]
  orders      Order[]
  customOrders  CustomOrder[] // Custom orders received by the seller
  portfolio   Portfolio[] // Portfolio items for the seller

  @@map("sellers")
}

model Product {
  id          Int      @id @default(autoincrement())
  sellerId    Int      @map("seller_id")
  name        String
  description String?
  price       Float
  imageUrl    String?  @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  
  seller      Seller   @relation(fields: [sellerId], references: [id])
  cartItems   Cart[]
  orderItems  OrderItem[]

  @@map("products")
}

model Cart {
  id         Int @id @default(autoincrement())
  userId     Int @map("user_id")
  productId  Int @map("product_id")
  quantity   Int
  
  user       User    @relation(fields: [userId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  sellerId      Int      @map("seller_id")
  requestTitle  String   @map("request_title")
  description   String
  category      String
  measurements  String?
  designFileUrl String?  @map("design_file_url")
  status        String   @default("request_submitted")
  quotedPrice   Float?   @map("quoted_price")
  snapToken     String?
  orderDate     DateTime @default(now()) @map("order_date")
  totalAmount   Float    @map("total_amount")
  
  user          User     @relation(fields: [userId], references: [id])
  seller        Seller   @relation(fields: [sellerId], references: [id])
  
  conversation  Conversation? // Setiap order punya satu conversation
  items         OrderItem[]

  @@map("orders")
}

// Model untuk percakapan terkait sebuah pesanan
model Conversation {
  id            Int          @id @default(autoincrement())
  orderId       Int?         @unique @map("order_id")
  customOrderId Int?         @unique @map("custom_order_id")
  order         Order?       @relation(fields: [orderId], references: [id])
  customOrder   CustomOrder? @relation(fields: [customOrderId], references: [id])
  
  messages Message[]

  @@map("conversations")
}

// Model untuk setiap pesan dalam percakapan
model Message {
  id              Int      @id @default(autoincrement())
  conversationId  Int      @map("conversation_id")
  senderId        Int      @map("sender_id") // ID dari User yang mengirim
  content         String
  createdAt       DateTime @default(now()) @map("created_at")

  conversation    Conversation @relation(fields: [conversationId], references: [id])
  sender          User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Skill {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id      Int @id @default(autoincrement())
  userId  Int @map("user_id")
  skillId Int @map("skill_id")
  
  user    User  @relation(fields: [userId], references: [id])
  skill   Skill @relation(fields: [skillId], references: [id])

  @@map("user_skills")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Model for notifications
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   // 'new_order', 'message', 'order_update'
  title     String
  message   String
  data      String?  // JSON data for additional info
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CustomOrder {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sellerId     Int      @map("seller_id")
  imageUrl     String?  // User-uploaded image of the item
  description  String   // Customization notes
  status       String   @default("pending") // pending, accepted, rejected, completed, negotiating, payment_pending, paid
  
  // Price negotiation fields
  initialPrice     Float?   @map("initial_price")     // Price proposed by seller
  proposedPrice    Float?   @map("proposed_price")    // Counter-offer by buyer
  agreedPrice      Float?   @map("agreed_price")      // Final agreed price
  negotiationStatus String? @default("none") @map("negotiation_status") // none, seller_proposed, buyer_countered, agreed, rejected
  
  // Payment fields
  snapToken        String?  @map("snap_token")        // Midtrans payment token
  paymentStatus    String?  @default("unpaid") @map("payment_status") // unpaid, pending, paid, failed, expired
  paidAt          DateTime? @map("paid_at")           // Payment completion timestamp
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  user         User     @relation(fields: [userId], references: [id])
  seller       Seller   @relation(fields: [sellerId], references: [id])
  courierRequest CourierRequest?
  conversation Conversation?
  negotiations PriceNegotiation[]

  @@map("custom_orders")
}

model CourierRequest {
  id            Int      @id @default(autoincrement())
  customOrderId Int      @unique @map("custom_order_id")
  address       String
  pickupTime    DateTime
  status        String   @default("requested") // requested, picked_up, delivered, cancelled
  createdAt     DateTime @default(now()) @map("created_at")

  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id])

  @@map("courier_requests")
}

model PriceNegotiation {
  id            Int      @id @default(autoincrement())
  customOrderId Int      @map("custom_order_id")
  proposedBy    String   // 'seller' or 'buyer'
  price         Float
  message       String?  // Optional message with the price offer
  status        String   @default("pending") // pending, accepted, rejected
  createdAt     DateTime @default(now()) @map("created_at")

  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id])

  @@map("price_negotiations")
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  sellerId    Int      @map("seller_id")
  title       String
  description String?
  imageUrl    String   @map("image_url")
  category    String?  // e.g., "Wedding Dress", "Casual Wear", "Formal Wear"
  tags        String?  // JSON array of tags
  featured    Boolean  @default(false) // Whether to feature this item
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  seller      Seller   @relation(fields: [sellerId], references: [id])

  @@map("portfolio")
}
